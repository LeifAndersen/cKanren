#lang racket

(require 
 "../ck.rkt"
 "../absento.rkt"
 "../tree-unify.rkt"
 "../neq.rkt"
 "tester.rkt")

(provide test-quines test-quines-long)

(define-lazy-goal (eval-expo exp env val)
  (conde
   ((fresh (v)
      (== `(quote ,v) exp)
      (not-in-envo 'quote env)
      (absento 'closure v)
      (== v val)))
   ((fresh (a*)
      (proper-listo a* env val)
      (== `(list . ,a*) exp)
      (not-in-envo 'list env)
      (absento 'closure a*)))
   ((symbolo exp) (lookupo exp env val))
   ((fresh (rator rand x body env^ a)
      (eval-expo rator env `(closure ,x ,body ,env^))
      (eval-expo rand env a)
      (eval-expo body `((,x . ,a) . ,env^) val)
      (== `(,rator ,rand) exp)))
   ((fresh (x body)
      (== `(lambda (,x) ,body) exp)
      (symbolo x)
      (not-in-envo 'lambda env)
      (== `(closure ,x ,body ,env) val)))))

(define not-in-envo
  (lambda (x env)
    (conde
      ((fresh (y v rest)
         (== `((,y . ,v) . ,rest) env)
         (=/= y x)
         (not-in-envo x rest)))
      ((== '() env)))))

(define-lazy-goal proper-listo
  (lambda (exp env val)
    (conde
      ((== '() exp)
       (== '() val))
      ((fresh (a d t-a t-d)
         (eval-expo a env t-a)
         (proper-listo d env t-d)
         (== `(,a . ,d) exp)
         (== `(,t-a . ,t-d) val))))))

(define lookupo
  (lambda (x env t)
    (fresh (rest y v)
      (== `((,y . ,v) . ,rest) env)
      (conde
        ((== y x) (== v t))
        ((=/= y x) (lookupo x rest t))))))

(define (test-quines)
  (parameterize ([reify-with-colon #f]
                 [reify-prefix-dot #f])
    
    (test "1 quine"
          (time (run 1 (q) (eval-expo q '() q)))
          '((((lambda (_.0) (list _.0 (list 'quote _.0)))
              '(lambda (_.0) (list _.0 (list 'quote _.0))))
             (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
             (sym _.0))))
    
    (test "2 quines"
          (time (run 2 (q) (eval-expo q '() q)))
          '((((lambda (_.0) (list _.0 (list 'quote _.0)))
              '(lambda (_.0) (list _.0 (list 'quote _.0))))
             (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
             (sym _.0))
            (((lambda (_.0)
                (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))
              '(lambda (_.0)
                 (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
             (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                  ((_.0 quote)) ((_.1 closure)))
             (absento (closure _.2))
             (sym _.0 _.1))))

    #;
    (test-check "3 quines"
                (run 3 (q) (eval-expo q '() q))
                '((((lambda (_.0) (list _.0 (list 'quote _.0)))
                    '(lambda (_.0) (list _.0 (list 'quote _.0))))
                   (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
                   (sym _.0))
                  (((lambda (_.0)
                      (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))
                    '(lambda (_.0)
                       (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0)))
                    '(lambda (_.0)
                       (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1))))

)

)

(define (test-quines-long)
  (test-quines)

  (parameterize ([reify-with-colon #f]
                 [reify-prefix-dot #f])
    (test-check "5 quines"
                (run 5 (q) (eval-expo q '() q))
                '((((lambda (_.0) (list _.0 (list 'quote _.0)))
                    '(lambda (_.0) (list _.0 (list 'quote _.0))))
                   (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
                   (sym _.0))
                  (((lambda (_.0)
                      (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))
                    '(lambda (_.0)
                       (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0)))
                    '(lambda (_.0)
                       (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
                    '(list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
                   (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
                   (sym _.0))
                  (((lambda (_.0)
                      (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0)))
                    '(lambda (_.0)
                       (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (sym _.0 _.1))))

    (test-check "10 quines"
                (run 10 (q) (eval-expo q '() q))
                '((((lambda (_.0) (list _.0 (list 'quote _.0)))
                    '(lambda (_.0) (list _.0 (list 'quote _.0))))
                   (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
                   (sym _.0))
                  (((lambda (_.0)
                      (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))
                    '(lambda (_.0)
                       (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0)))
                    '(lambda (_.0)
                       (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
                    '(list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
                   (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
                   (sym _.0))
                  (((lambda (_.0)
                      (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0)))
                    '(lambda (_.0)
                       (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      ((lambda (_.1) (list _.0 (list 'quote _.0))) '_.2))
                    '(lambda (_.0)
                       ((lambda (_.1) (list _.0 (list 'quote _.0))) '_.2)))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 ((lambda (_.1) (list 'quote _.0)) '_.2)))
                    '(lambda (_.0)
                       (list _.0 ((lambda (_.1) (list 'quote _.0)) '_.2))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 (list 'quote ((lambda (_.1) _.0) '_.2))))
                    '(lambda (_.0)
                       (list _.0 (list 'quote ((lambda (_.1) _.0) '_.2)))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      ((lambda (_.1) (list _.1 (list 'quote _.1))) _.0))
                    '(lambda (_.0)
                       ((lambda (_.1) (list _.1 (list 'quote _.1))) _.0)))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 ((lambda (_.1) (list 'quote _.1)) _.0)))
                    '(lambda (_.0)
                       (list _.0 ((lambda (_.1) (list 'quote _.1)) _.0))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (sym _.0 _.1))))

    (test-check "40 quines"
                (run 40 (q) (eval-expo q '() q))
                '((((lambda (_.0) (list _.0 (list 'quote _.0)))
                    '(lambda (_.0) (list _.0 (list 'quote _.0))))
                   (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
                   (sym _.0))
                  (((lambda (_.0)
                      (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))
                    '(lambda (_.0)
                       (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0)))
                    '(lambda (_.0)
                       (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
                    '(list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
                   (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
                   (sym _.0))
                  (((lambda (_.0)
                      (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0)))
                    '(lambda (_.0)
                       (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      ((lambda (_.1) (list _.0 (list 'quote _.0))) '_.2))
                    '(lambda (_.0)
                       ((lambda (_.1) (list _.0 (list 'quote _.0))) '_.2)))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 ((lambda (_.1) (list 'quote _.0)) '_.2)))
                    '(lambda (_.0)
                       (list _.0 ((lambda (_.1) (list 'quote _.0)) '_.2))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 (list 'quote ((lambda (_.1) _.0) '_.2))))
                    '(lambda (_.0)
                       (list _.0 (list 'quote ((lambda (_.1) _.0) '_.2)))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      ((lambda (_.1) (list _.1 (list 'quote _.1))) _.0))
                    '(lambda (_.0)
                       ((lambda (_.1) (list _.1 (list 'quote _.1))) _.0)))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 ((lambda (_.1) (list 'quote _.1)) _.0)))
                    '(lambda (_.0)
                       (list _.0 ((lambda (_.1) (list 'quote _.1)) _.0))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      ((lambda (_.1) (list _.0 (list _.1 _.0))) 'quote))
                    '(lambda (_.0)
                       ((lambda (_.1) (list _.0 (list _.1 _.0))) 'quote)))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 ((lambda (_.1) (list _.1 _.0)) 'quote)))
                    '(lambda (_.0)
                       (list _.0 ((lambda (_.1) (list _.1 _.0)) 'quote))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 (list 'quote ((lambda (_.1) _.1) _.0))))
                    '(lambda (_.0)
                       (list _.0 (list 'quote ((lambda (_.1) _.1) _.0)))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list
                       ((lambda (_.1) _.0) '_.2)
                       (list ((lambda (_.3) 'quote) '_.4) _.0)))
                    '(lambda (_.0)
                       (list
                        ((lambda (_.1) _.0) '_.2)
                        (list ((lambda (_.3) 'quote) '_.4) _.0))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.3 closure)) ((_.3 quote)))
                   (absento (closure _.2) (closure _.4))
                   (sym _.0 _.1 _.3))
                  (((lambda (_.0)
                      (list ((lambda (_.1) _.1) _.0) (list 'quote _.0)))
                    '(lambda (_.0)
                       (list ((lambda (_.1) _.1) _.0) (list 'quote _.0))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 (list 'quote ((lambda (_.1) _.0) _.0))))
                    '(lambda (_.0)
                       (list _.0 (list 'quote ((lambda (_.1) _.0) _.0)))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 ((lambda (_.1) (list 'quote _.0)) _.0)))
                    '(lambda (_.0)
                       (list _.0 ((lambda (_.1) (list 'quote _.0)) _.0))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      ((lambda (_.1) (list _.1 (list 'quote _.0))) _.0))
                    '(lambda (_.0)
                       ((lambda (_.1) (list _.1 (list 'quote _.0))) _.0)))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 (list ((lambda (_.1) 'quote) _.0) _.0)))
                    '(lambda (_.0)
                       (list _.0 (list ((lambda (_.1) 'quote) _.0) _.0))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list
                       ((lambda (_.1) _.0) '_.2)
                       (list ((lambda (_.3) _.3) 'quote) _.0)))
                    '(lambda (_.0)
                       (list
                        ((lambda (_.1) _.0) '_.2)
                        (list ((lambda (_.3) _.3) 'quote) _.0))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.3 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1 _.3))
                  (((lambda (_.0)
                      (list
                       ((lambda (_.1) _.0) '_.2)
                       ((lambda (_.3) (list 'quote _.0)) '_.4)))
                    '(lambda (_.0)
                       (list
                        ((lambda (_.1) _.0) '_.2)
                        ((lambda (_.3) (list 'quote _.0)) '_.4))))
                   (=/= ((_.0 _.1)) ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda))
                        ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.3 closure))
                        ((_.3 list)) ((_.3 quote)))
                   (absento (closure _.2) (closure _.4))
                   (sym _.0 _.1 _.3))
                  (((lambda (_.0)
                      (list
                       ((lambda (_.1) _.0) '_.2)
                       (list 'quote ((lambda (_.3) _.0) '_.4))))
                    '(lambda (_.0)
                       (list
                        ((lambda (_.1) _.0) '_.2)
                        (list 'quote ((lambda (_.3) _.0) '_.4)))))
                   (=/= ((_.0 _.1)) ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda))
                        ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.3 closure)))
                   (absento (closure _.2) (closure _.4))
                   (sym _.0 _.1 _.3))
                  (((lambda (_.0)
                      (list
                       _.0
                       (list
                        ((lambda (_.1) 'quote) '_.2)
                        ((lambda (_.3) _.0) '_.4))))
                    '(lambda (_.0)
                       (list
                        _.0
                        (list
                         ((lambda (_.1) 'quote) '_.2)
                         ((lambda (_.3) _.0) '_.4)))))
                   (=/= ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 quote)) ((_.3 closure)))
                   (absento (closure _.2) (closure _.4))
                   (sym _.0 _.1 _.3))
                  (((lambda (_.0)
                      ((lambda (_.1) (list _.0 (list 'quote _.1))) _.0))
                    '(lambda (_.0)
                       ((lambda (_.1) (list _.0 (list 'quote _.1))) _.0)))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list _.0 (list 'quote ((lambda (_.1) _.0) (list)))))
                    '(lambda (_.0)
                       (list _.0 (list 'quote ((lambda (_.1) _.0) (list))))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list
                       (list 'lambda '(_.0) _.0)
                       (list ((lambda (_.1) 'quote) '_.2) _.0)))
                    '(list
                      (list 'lambda '(_.0) _.0)
                      (list ((lambda (_.1) 'quote) '_.2) _.0)))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      ((lambda (_.1)
                         (list ((lambda (_.2) _.0) '_.3) (list 'quote _.0)))
                       '_.4))
                    '(lambda (_.0)
                       ((lambda (_.1)
                          (list ((lambda (_.2) _.0) '_.3) (list 'quote _.0)))
                        '_.4)))
                   (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 closure)) ((_.0 lambda))
                        ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.1 lambda))
                        ((_.1 list)) ((_.1 quote)) ((_.2 closure)))
                   (absento (closure _.3) (closure _.4))
                   (sym _.0 _.1 _.2))
                  (((lambda (_.0)
                      (list
                       ((lambda (_.1) _.0) '_.2)
                       ((lambda (_.3) (list 'quote _.3)) _.0)))
                    '(lambda (_.0)
                       (list
                        ((lambda (_.1) _.0) '_.2)
                        ((lambda (_.3) (list 'quote _.3)) _.0))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.3 closure)) ((_.3 list))
                        ((_.3 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1 _.3))
                  (((lambda (_.0)
                      (list
                       ((lambda (_.1) _.0) '_.2)
                       ((lambda (_.3) (list _.3 _.0)) 'quote)))
                    '(lambda (_.0)
                       (list
                        ((lambda (_.1) _.0) '_.2)
                        ((lambda (_.3) (list _.3 _.0)) 'quote))))
                   (=/= ((_.0 _.1)) ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda))
                        ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.3 closure))
                        ((_.3 list)))
                   (absento (closure _.2))
                   (sym _.0 _.1 _.3))
                  (((lambda (_.0)
                      (list
                       ((lambda (_.1) _.0) '_.2)
                       (list 'quote ((lambda (_.3) _.3) _.0))))
                    '(lambda (_.0)
                       (list
                        ((lambda (_.1) _.0) '_.2)
                        (list 'quote ((lambda (_.3) _.3) _.0)))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.3 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1 _.3))
                  (((lambda (_.0)
                      (list _.0 ((lambda (_.1) (list 'quote _.0)) (list))))
                    '(lambda (_.0)
                       (list _.0 ((lambda (_.1) (list 'quote _.0)) (list)))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list
                       _.0
                       (list
                        ((lambda (_.1) 'quote) '_.2)
                        ((lambda (_.3) _.3) _.0))))
                    '(lambda (_.0)
                       (list
                        _.0
                        (list
                         ((lambda (_.1) 'quote) '_.2)
                         ((lambda (_.3) _.3) _.0)))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 quote)) ((_.3 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1 _.3))
                  (((lambda (_.0)
                      ((lambda (_.1) (list _.0 (list 'quote _.0))) (list)))
                    '(lambda (_.0)
                       ((lambda (_.1) (list _.0 (list 'quote _.0))) (list))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list ((lambda (_.1) _.0) _.0) (list 'quote _.0)))
                    '(lambda (_.0)
                       (list ((lambda (_.1) _.0) _.0) (list 'quote _.0))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list
                       (list 'lambda '(_.0) _.0)
                       (list ((lambda (_.1) _.1) 'quote) _.0)))
                    '(list
                      (list 'lambda '(_.0) _.0)
                      (list ((lambda (_.1) _.1) 'quote) _.0)))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      ((lambda (_.1) (list _.0 (list 'quote _.0))) _.0))
                    '(lambda (_.0)
                       ((lambda (_.1) (list _.0 (list 'quote _.0))) _.0)))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list
                       (list 'lambda '(_.0) _.0)
                       ((lambda (_.1) (list 'quote _.0)) '_.2)))
                    '(list
                      (list 'lambda '(_.0) _.0)
                      ((lambda (_.1) (list 'quote _.0)) '_.2)))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (((lambda (_.0)
                      (list
                       ((lambda (_.1) _.0) '_.2)
                       (list 'quote ((lambda (_.3) _.0) _.0))))
                    '(lambda (_.0)
                       (list
                        ((lambda (_.1) _.0) '_.2)
                        (list 'quote ((lambda (_.3) _.0) _.0)))))
                   (=/= ((_.0 _.1)) ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda))
                        ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.3 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1 _.3))
                  (((lambda (_.0)
                      (list
                       ((lambda (_.1) _.0) '_.2)
                       ((lambda (_.3) (list 'quote _.0)) _.0)))
                    '(lambda (_.0)
                       (list
                        ((lambda (_.1) _.0) '_.2)
                        ((lambda (_.3) (list 'quote _.0)) _.0))))
                   (=/= ((_.0 _.1)) ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda))
                        ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.3 closure))
                        ((_.3 list)) ((_.3 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1 _.3))
                  (((lambda (_.0)
                      ((lambda (_.1)
                         (list ((lambda (_.2) _.0) '_.3) (list _.1 _.0)))
                       'quote))
                    '(lambda (_.0)
                       ((lambda (_.1)
                          (list ((lambda (_.2) _.0) '_.3) (list _.1 _.0)))
                        'quote)))
                   (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 closure)) ((_.0 lambda))
                        ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.1 lambda))
                        ((_.1 list)) ((_.1 quote)) ((_.2 closure)))
                   (absento (closure _.3))
                   (sym _.0 _.1 _.2))))

    (test-check "2 twines"
                (run 2 (x) (fresh (p q)
                             (=/= p q)
                             (eval-expo p '() q)
                             (eval-expo q '() p)
                             (== `(,p ,q) x)))
                '((('((lambda (_.0)
                        (list 'quote (list _.0 (list 'quote _.0))))
                      '(lambda (_.0) (list 'quote (list _.0 (list 'quote _.0)))))
                    ((lambda (_.0) (list 'quote (list _.0 (list 'quote _.0))))
                     '(lambda (_.0) (list 'quote (list _.0 (list 'quote _.0))))))
                   (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
                   (sym _.0))
                  (('((lambda (_.0)
                        (list
                         'quote
                         (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
                      '(lambda (_.0)
                         (list
                          'quote
                          (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))))
                    ((lambda (_.0)
                       (list
                        'quote
                        (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
                     '(lambda (_.0)
                        (list
                         'quote
                         (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1))))

    (test-check "4 thrines"
                (run 4 (x)
                  (fresh (p q r)
                    (=/= p q)
                    (=/= q r)
                    (=/= r p)
                    (eval-expo p '() q)
                    (eval-expo q '() r)
                    (eval-expo r '() p)
                    (== `(,p ,q ,r) x)))
                '(((''((lambda (_.0)
                         (list 'quote (list 'quote (list _.0 (list 'quote _.0)))))
                       '(lambda (_.0)
                          (list 'quote (list 'quote (list _.0 (list 'quote _.0))))))
                    '((lambda (_.0)
                        (list 'quote (list 'quote (list _.0 (list 'quote _.0)))))
                      '(lambda (_.0)
                         (list 'quote (list 'quote (list _.0 (list 'quote _.0))))))
                    ((lambda (_.0)
                       (list 'quote (list 'quote (list _.0 (list 'quote _.0)))))
                     '(lambda (_.0)
                        (list 'quote (list 'quote (list _.0 (list 'quote _.0)))))))
                   (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
                   (sym _.0))
                  ((''((lambda (_.0)
                         (list
                          'quote
                          (list
                           'quote
                           (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))))
                       '(lambda (_.0)
                          (list
                           'quote
                           (list
                            'quote
                            (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))))
                    '((lambda (_.0)
                        (list
                         'quote
                         (list
                          'quote
                          (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))))
                      '(lambda (_.0)
                         (list
                          'quote
                          (list
                           'quote
                           (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))))
                    ((lambda (_.0)
                       (list
                        'quote
                        (list
                         'quote
                         (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))))
                     '(lambda (_.0)
                        (list
                         'quote
                         (list
                          'quote
                          (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))))))
                   (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)))
                   (absento (closure _.2))
                   (sym _.0 _.1))
                  (('(list
                      '(lambda (_.0)
                         (list
                          'quote
                          (list 'list _.0 (list 'quote (list 'quote _.0)))))
                      '''(lambda (_.0)
                           (list
                            'quote
                            (list 'list _.0 (list 'quote (list 'quote _.0))))))
                    (list
                     '(lambda (_.0)
                        (list
                         'quote
                         (list 'list _.0 (list 'quote (list 'quote _.0)))))
                     '''(lambda (_.0)
                          (list
                           'quote
                           (list 'list _.0 (list 'quote (list 'quote _.0))))))
                    ((lambda (_.0)
                       (list
                        'quote
                        (list 'list _.0 (list 'quote (list 'quote _.0)))))
                     ''(lambda (_.0)
                         (list
                          'quote
                          (list 'list _.0 (list 'quote (list 'quote _.0)))))))
                   (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
                   (sym _.0))
                  ((''((lambda (_.0)
                         (list
                          ((lambda (_.1) 'quote) '_.2)
                          (list 'quote (list _.0 (list 'quote _.0)))))
                       '(lambda (_.0)
                          (list
                           ((lambda (_.1) 'quote) '_.2)
                           (list 'quote (list _.0 (list 'quote _.0))))))
                    '((lambda (_.0)
                        (list
                         ((lambda (_.1) 'quote) '_.2)
                         (list 'quote (list _.0 (list 'quote _.0)))))
                      '(lambda (_.0)
                         (list
                          ((lambda (_.1) 'quote) '_.2)
                          (list 'quote (list _.0 (list 'quote _.0))))))
                    ((lambda (_.0)
                       (list
                        ((lambda (_.1) 'quote) '_.2)
                        (list 'quote (list _.0 (list 'quote _.0)))))
                     '(lambda (_.0)
                        (list
                         ((lambda (_.1) 'quote) '_.2)
                         (list 'quote (list _.0 (list 'quote _.0)))))))
                   (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
                        ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
                   (absento (closure _.2))
                   (sym _.0 _.1))))))

(module+ main
  (test-quines)
#;(test-quines-long))
